{"ast":null,"code":"import _defineProperty from \"/Users/llam/git/gentle-git-intro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/llam/git/gentle-git-intro/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/llam/git/gentle-git-intro/components/mdx/git/AddFile.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Input from '../../Input';\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"Add a file to our working directory\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"Type the following command:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }), \"    $ echo \\u2018hello world\\u2019 > hello.txt\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, \"Take a look at the status again:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }), \"    $ git status\\n    On branch master\\n\\n    No commits yet\\n\\n    Untracked files:\\n    (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\n      hello.txt\\n\\n    nothing added to commit but untracked files present (use \\\"git add\\\" to track)\\n\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \"The status gives us a clue on what we need to do next:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }\n  }), \"    $ git add .\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, \"Git knows we have a new file with the \", mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 50\n    }\n  }, \"intention\"), \" to add it to the repository but we have not committed it yet. This is often a point of confusion for new users.  I think of \", mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 216\n    }\n  }, \"git add\"), \" like an engagement ring.  It's a promise to commit, but we're not there yet.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"Let's take a look at the status again:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  }), \"    $ git status\\n    On branch master\\n\\n    No commits yet\\n\\n    Changes to be committed:\\n      (use \\\"git rm --cached <file>...\\\" to unstage)\\n\\n        new file:   hello.txt\\n\")), mdx(Input, {\n    question: \"How would you add the files your current directory?\",\n    answer: \"git add .\",\n    mdxType: \"Input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/llam/git/gentle-git-intro/components/mdx/git/AddFile.mdx"],"names":["React","mdx","Input","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA,IAAMC,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEC,KACF;;AACD,SAAO,IAAC,SAAD,gDAAeJ,WAAf,GAAgCI,KAAhC;AAAuC,IAAA,UAAU,EAAED,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAFK,EAGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAHK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAL,CAJK,EAML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCANK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gRAAL,CAPK,EAoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DApBK,EAqBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAL,CArBK,EAuBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAA6C;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA7C,mIAAmN;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAnN,kFAvBK,EAwBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAxBK,EAyBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8LAAL,CAzBK,EAmCL,IAAC,KAAD;AAAO,IAAA,QAAQ,EAAC,qDAAhB;AAAsE,IAAA,MAAM,EAAC,WAA7E;AAAyF,IAAA,OAAO,EAAC,OAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnCK,CAAP;AAqCD;KAzCuBD,U;AA2CxB;AACAA,UAAU,CAACG,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Input from '../../Input'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Add a file to our working directory`}</h2>\n    <p>{`Type the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ echo ‘hello world’ > hello.txt\n`}</code></pre>\n    <p>{`Take a look at the status again:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git status\n    On branch master\n\n    No commits yet\n\n    Untracked files:\n    (use \"git add <file>...\" to include in what will be committed)\n\n      hello.txt\n\n    nothing added to commit but untracked files present (use \"git add\" to track)\n\n`}</code></pre>\n    <p>{`The status gives us a clue on what we need to do next:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git add .\n`}</code></pre>\n    <p>{`Git knows we have a new file with the `}<em parentName=\"p\">{`intention`}</em>{` to add it to the repository but we have not committed it yet. This is often a point of confusion for new users.  I think of `}<inlineCode parentName=\"p\">{`git add`}</inlineCode>{` like an engagement ring.  It's a promise to commit, but we're not there yet.`}</p>\n    <p>{`Let's take a look at the status again:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git status\n    On branch master\n\n    No commits yet\n\n    Changes to be committed:\n      (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   hello.txt\n`}</code></pre>\n    <Input question=\"How would you add the files your current directory?\" answer=\"git add .\" mdxType=\"Input\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}