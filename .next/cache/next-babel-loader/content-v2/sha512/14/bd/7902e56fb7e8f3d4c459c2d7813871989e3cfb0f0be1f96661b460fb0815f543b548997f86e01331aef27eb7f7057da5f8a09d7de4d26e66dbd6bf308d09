{"ast":null,"code":"import _defineProperty from \"/Users/llam/git/gentle-git-intro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/llam/git/gentle-git-intro/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/llam/git/gentle-git-intro/components/Intro.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, \"#Introduction\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"Git is a version control system written by Linus Torvalds in 2005. It was created specifically to manage the Linux Kernel Project. One could say it was written by Linux Kernel Developers for Linux Kernel Developers. As a result, the initial environment for working with git is the command line. \"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"Now, if you're not familiar with the command line (like a Linux Kernel Developer), this can feel scary.  With so many GUI tools out there, you may feel it's not even necessary to learn.  I want to suggest that knowing how the git GUIs work under the hood is super helpful as a developer.  With some diligence and working through this tutorial, you'll be a git command line power user in no time...well with some time.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, mdx(\"strong\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 8\n    }\n  }, \"NOTE\"), \": I leave out some of the git output for clarity.\"));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/llam/git/gentle-git-intro/components/Intro.mdx"],"names":["React","mdx","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AAIA,IAAMC,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEC,KACF;;AACD,SAAO,IAAC,SAAD,gDAAeJ,WAAf,GAAgCI,KAAhC;AAAuC,IAAA,UAAU,EAAED,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADK,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+SAFK,EAGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yaAHK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG;AAAQ,IAAA,UAAU,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,sDAJK,CAAP;AAMD;KAVuBD,U;AAYxB;AACAA,UAAU,CAACG,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`#Introduction`}</h2>\n    <p>{`Git is a version control system written by Linus Torvalds in 2005. It was created specifically to manage the Linux Kernel Project. One could say it was written by Linux Kernel Developers for Linux Kernel Developers. As a result, the initial environment for working with git is the command line. `}</p>\n    <p>{`Now, if you're not familiar with the command line (like a Linux Kernel Developer), this can feel scary.  With so many GUI tools out there, you may feel it's not even necessary to learn.  I want to suggest that knowing how the git GUIs work under the hood is super helpful as a developer.  With some diligence and working through this tutorial, you'll be a git command line power user in no time...well with some time.`}</p>\n    <p><strong parentName=\"p\">{`NOTE`}</strong>{`: I leave out some of the git output for clarity.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}