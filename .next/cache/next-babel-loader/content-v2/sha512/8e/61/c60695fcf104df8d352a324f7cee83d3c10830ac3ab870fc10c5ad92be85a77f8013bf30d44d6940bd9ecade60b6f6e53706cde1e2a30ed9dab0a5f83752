{"ast":null,"code":"var _jsxFileName = \"/Users/llam/git/gentle-git-intro/components/mdx/git/EditBranch.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Input from '../../Input';\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, `Let’s make a change on our new branch.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, `Edit hello.txt by adding a 2nd line saying who you are.  (Example: “I am Liz.”)\nIf you check the status, you will see git knows we made changes:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }), `    $ echo 'I am Liz.' >> hello.txt\n    $ cat hello.txt\n      hello world\n      I am Liz.\n    $ git status\n    On branch dev_llam\n    Changes not staged for commit:\n      (use \"git add <file>...\" to update what will be committed)\n      (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   hello.txt\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, `We want to add our changes:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }\n  }), `    $ git add .\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, `Now we want to commit them:`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }), `    $ git commit -m “Saying who I am”\n`)), mdx(Input, {\n    question: \"Make a commit with the message 'Fixed'.\",\n    answer: \"git commit -m 'Fixed'\",\n    mdxType: \"Input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/llam/git/gentle-git-intro/components/mdx/git/EditBranch.mdx"],"names":["React","mdx","Input","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA,MAAMC,WAAW,GAAG,EAApB;AAGA,MAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAHgC;AACjCC,IAAAA;AADiC,GAGhC;AAAA,MADEC,KACF;;AACD,SAAO,IAAC,SAAD,gDAAeJ,WAAf,GAAgCI,KAAhC;AAAuC,IAAA,UAAU,EAAED,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,wCAAN,CAFK,EAGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AACT,iEADI,CAHK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdS,CAAL,CALK,EAoBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,6BAAL,CApBK,EAqBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC;AAC1C,CADS,CAAL,CArBK,EAuBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,6BAAL,CAvBK,EAwBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC;AAC1C,CADS,CAAL,CAxBK,EA0BL,IAAC,KAAD;AAAO,IAAA,QAAQ,EAAC,yCAAhB;AAA0D,IAAA,MAAM,EAAC,uBAAjE;AAAyF,IAAA,OAAO,EAAC,OAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BK,CAAP;AA4BD;AAED;AACAD,UAAU,CAACG,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Input from '../../Input'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Let’s make a change on our new branch.`}</h2>\n    <p>{`Edit hello.txt by adding a 2nd line saying who you are.  (Example: “I am Liz.”)\nIf you check the status, you will see git knows we made changes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ echo 'I am Liz.' >> hello.txt\n    $ cat hello.txt\n      hello world\n      I am Liz.\n    $ git status\n    On branch dev_llam\n    Changes not staged for commit:\n      (use \"git add <file>...\" to update what will be committed)\n      (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   hello.txt\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n`}</code></pre>\n    <p>{`We want to add our changes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git add .\n`}</code></pre>\n    <p>{`Now we want to commit them:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git commit -m “Saying who I am”\n`}</code></pre>\n    <Input question=\"Make a commit with the message 'Fixed'.\" answer=\"git commit -m 'Fixed'\" mdxType=\"Input\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}