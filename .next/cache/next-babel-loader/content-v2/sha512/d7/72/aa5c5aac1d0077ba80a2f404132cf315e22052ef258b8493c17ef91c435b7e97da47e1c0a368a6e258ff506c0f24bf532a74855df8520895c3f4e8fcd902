{"ast":null,"code":"import _defineProperty from \"/Users/llam/git/gentle-git-intro/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/llam/git/gentle-git-intro/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/llam/git/gentle-git-intro/components/mdx/git/Pulling.mdx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Input from '../../Input';\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"What about pulling?\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \"To keep our repo updated, we need to pull from the original/remote.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, \"Go to the \", mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 22\n    }\n  }, \"first\"), \" terminal window with the original project open and make a change and commit it.  \"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }), \"   $ echo 'I love coffee!' >> hello.txt\\n   $ git add .\\n   $ git commit -m \\\"Add line about my love of caffeine.\\\"\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, \"Go back to the \", mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 27\n    }\n  }, \"second\"), \" terminal window with project2 open and check its status:\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }), \"    $ git status\\n    On branch master\\n    Your branch is up to date with 'origin/master'.\\n\\n    nothing to commit, working tree clean\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, \"That's interesting.  Didn't we just make a change in the original project?!? Our cloned project (project2) does not know it is out of date with the original.\\nThat is because we need to \", mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 30\n    }\n  }, \"fetch\"), \" the changes (note: fetching is different from pulling).\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }\n  }), \"    $ git fetch origin master\\n    $ git status\\n      On branch master\\n      Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\\n        (use \\\"git pull\\\" to update your local branch)\\n\\n      nothing to commit, working tree clean\\n\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, \"Great! Now our repo is updated...but our working directory is not.\\nThis is because fetching only updates our local repo, while pulling will fetch and merge it into our local workspace.\\nAs the git output suggest, let's pull!\"), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _objectSpread(_objectSpread({\n    parentName: \"pre\"\n  }, {}), {}, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }\n  }), \"    $ git pull\\n    $ git log --oneline\\n      fb58b27 (HEAD -> master, origin/master, origin/HEAD) Add line about my love of caffeine.\\n      187c6fa (origin/dev_llam) Saying who I am\\n      deccda5 Commit first file to the repo.\\n\")), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, \"Yay! We\\u2019re done! We have successfully pulled the coffee change from a remote repo.\"), mdx(Input, {\n    question: \"\",\n    answer: \"\",\n    mdxType: \"Input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }));\n}\n_c = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDXContent\");","map":{"version":3,"sources":["/Users/llam/git/gentle-git-intro/components/mdx/git/Pulling.mdx"],"names":["React","mdx","Input","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA,IAAMC,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEC,KACF;;AACD,SAAO,IAAC,SAAD,gDAAeJ,WAAf,GAAgCI,KAAhC;AAAuC,IAAA,UAAU,EAAED,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFK,EAGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAHK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiB;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAjB,uFAJK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HAAL,CALK,EASL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsB;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAtB,8DATK,EAUL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mJAAL,CAVK,EAgBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mMACyB;AAAI,IAAA,UAAU,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADzB,6DAhBK,EAkBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gRAAL,CAlBK,EA2BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yOA3BK,EA8BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iPAAL,CA9BK,EAoCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FApCK,EAqCL,IAAC,KAAD;AAAO,IAAA,QAAQ,EAAC,EAAhB;AAAmB,IAAA,MAAM,EAAC,EAA1B;AAA6B,IAAA,OAAO,EAAC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCK,CAAP;AAuCD;KA3CuBD,U;AA6CxB;AACAA,UAAU,CAACG,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport Input from '../../Input'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`What about pulling?`}</h2>\n    <p>{`To keep our repo updated, we need to pull from the original/remote.`}</p>\n    <p>{`Go to the `}<em parentName=\"p\">{`first`}</em>{` terminal window with the original project open and make a change and commit it.  `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`   $ echo 'I love coffee!' >> hello.txt\n   $ git add .\n   $ git commit -m \"Add line about my love of caffeine.\"\n`}</code></pre>\n    <p>{`Go back to the `}<em parentName=\"p\">{`second`}</em>{` terminal window with project2 open and check its status:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git status\n    On branch master\n    Your branch is up to date with 'origin/master'.\n\n    nothing to commit, working tree clean\n`}</code></pre>\n    <p>{`That's interesting.  Didn't we just make a change in the original project?!? Our cloned project (project2) does not know it is out of date with the original.\nThat is because we need to `}<em parentName=\"p\">{`fetch`}</em>{` the changes (note: fetching is different from pulling).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git fetch origin master\n    $ git status\n      On branch master\n      Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n        (use \"git pull\" to update your local branch)\n\n      nothing to commit, working tree clean\n\n`}</code></pre>\n    <p>{`Great! Now our repo is updated...but our working directory is not.\nThis is because fetching only updates our local repo, while pulling will fetch and merge it into our local workspace.\nAs the git output suggest, let's pull!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    $ git pull\n    $ git log --oneline\n      fb58b27 (HEAD -> master, origin/master, origin/HEAD) Add line about my love of caffeine.\n      187c6fa (origin/dev_llam) Saying who I am\n      deccda5 Commit first file to the repo.\n`}</code></pre>\n    <p>{`Yay! We’re done! We have successfully pulled the coffee change from a remote repo.`}</p>\n    <Input question=\"\" answer=\"\" mdxType=\"Input\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}